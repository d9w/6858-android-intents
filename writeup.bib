@inproceedings{chin_analyzing_2011,
	address = {New York, {NY}, {USA}},
	series = {{MobiSys} '11},
	title = {Analyzing inter-application communication in Android},
	isbn = {978-1-4503-0643-0},
	url = {http://doi.acm.org/10.1145/1999995.2000018},
	doi = {10.1145/1999995.2000018},
	abstract = {Modern smartphone operating systems support the development of third-party applications with open system {APIs.} In addition to an open {API}, the Android operating system also provides a rich inter-application message passing system. This encourages inter-application collaboration and reduces developer burden by facilitating component reuse. Unfortunately, message passing is also an application attack surface. The content of messages can be sniffed, modified, stolen, or replaced, which can compromise user privacy. Also, a malicious application can inject forged or otherwise malicious messages, which can lead to breaches of user data and violate application security policies. We examine Android application interaction and identify security risks in application components. We provide a tool, {ComDroid}, that detects application communication vulnerabilities. {ComDroid} can be used by developers to analyze their own applications before release, by application reviewers to analyze applications in the Android Market, and by end users. We analyzed 20 applications with the help of {ComDroid} and found 34 exploitable vulnerabilities; 12 of the 20 applications have at least one vulnerability.},
	urldate = {2012-11-03},
	booktitle = {Proceedings of the 9th international conference on Mobile systems, applications, and services},
	publisher = {{ACM}},
	author = {Chin, Erika and Felt, Adrienne Porter and Greenwood, Kate and Wagner, David},
	year = {2011},
	keywords = {Android, intents, message passing, mobile phone security},
	pages = {239–252},
},

@inproceedings{lu_chex_2012,
	address = {New York, {NY}, {USA}},
	series = {{CCS} '12},
	title = {{CHEX:} statically vetting Android apps for component hijacking vulnerabilities},
	isbn = {978-1-4503-1651-4},
	shorttitle = {{CHEX}},
	url = {http://doi.acm.org/10.1145/2382196.2382223},
	doi = {10.1145/2382196.2382223},
	abstract = {An enormous number of apps have been developed for Android in recent years, making it one of the most popular mobile operating systems. However, the quality of the booming apps can be a concern [4]. Poorly engineered apps may contain security vulnerabilities that can severally undermine users' security and privacy. In this paper, we study a general category of vulnerabilities found in Android apps, namely the component hijacking vulnerabilities. Several types of previously reported app vulnerabilities, such as permission leakage, unauthorized data access, intent spoofing, and etc., belong to this category. We propose {CHEX}, a static analysis method to automatically vet Android apps for component hijacking vulnerabilities. Modeling these vulnerabilities from a data-flow analysis perspective, {CHEX} analyzes Android apps and detects possible hijack-enabling flows by conducting low-overhead reachability tests on customized system dependence graphs. To tackle analysis challenges imposed by Android's special programming paradigm, we employ a novel technique to discover component entry points in their completeness and introduce app splitting to model the asynchronous executions of multiple entry points in an app. We prototyped {CHEX} based on Dalysis, a generic static analysis framework that we built to support many types of analysis on Android app bytecode. We evaluated {CHEX} with 5,486 real Android apps and found 254 potential component hijacking vulnerabilities. The median execution time of {CHEX} on an app is 37.02 seconds, which is fast enough to be used in very high volume app vetting and testing scenarios.},
	urldate = {2012-11-03},
	booktitle = {Proceedings of the 2012 {ACM} conference on Computer and communications security},
	publisher = {{ACM}},
	author = {Lu, Long and Li, Zhichun and Wu, Zhenyu and Lee, Wenke and Jiang, Guofei},
	year = {2012},
	keywords = {app splitting, component hijacking vulnerability, static analysis},
	pages = {229–240},
},

@inproceedings{grace_systematic_2012,
	title = {Systematic detection of capability leaks in stock Android smartphones},
	url = {http://www4.ncsu.edu/~zwang15/files/NDSS12_Woodpecker.pdf},
	urldate = {2012-11-03},
	booktitle = {Proceedings of the 19th Annual Symposium on Network and Distributed System Security},
	author = {Grace, M. and Zhou, Y. and Wang, Z. and Jiang, X.},
	year = {2012},
},

@misc{baksmali,
	title = {Baksmali: a disassembler for Android’s dex format},
        howpublished = {\url{http://code.google.com/p/smali/}},
	author = {B. Gruver},
},

@misc{dedexer,
	title = {Dedexer},
        howpublished = {\url{http://dedexer.sourceforge.net/}},
	author = {G. Paller},
},
